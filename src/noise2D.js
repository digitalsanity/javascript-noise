"use strict";

function SimplexNoise2D() {
    this.perm = new Int32Array([0, 35, 138, 20, 259, 277, 74, 228, 161, 162, 231, 79, 284, 268, 31, 151, 50, 17, 52, 155, 37, 276, 5, 91, 245, 178, 179, 248, 96, 12, 285, 48, 168, 67, 34, 69, 172, 54, 4, 22, 108, 262, 195, 196, 265, 113, 29, 13, 65, 185, 84, 51, 86, 189, 71, 21, 39, 125, 279, 212, 213, 282, 130, 46, 30, 82, 202, 101, 68, 103, 206, 88, 38, 56, 142, 7, 229, 230, 10, 147, 63, 47, 99, 219, 118, 85, 120, 223, 105, 55, 73, 159, 24, 246, 247, 27, 164, 80, 64, 116, 236, 135, 102, 137, 240, 122, 72, 90, 176, 41, 263, 264, 44, 181, 97, 81, 133, 253, 152, 119, 154, 257, 139, 89, 107, 193, 58, 280, 281, 61, 198, 114, 98, 150, 270, 169, 136, 171, 274, 156, 106, 124, 210, 75, 8, 9, 78, 215, 131, 115, 167, 287, 186, 153, 188, 2, 173, 123, 141, 227, 92, 25, 26, 95, 232, 148, 132, 184, 15, 203, 170, 205, 19, 190, 140, 158, 244, 109, 42, 43, 112, 249, 165, 149, 201, 32, 220, 187, 222, 36, 207, 157, 175, 261, 126, 59, 60, 129, 266, 182, 166, 218, 49, 237, 204, 239, 53, 224, 174, 192, 278, 143, 76, 77, 146, 283, 199, 183, 235, 66, 254, 221, 256, 70, 241, 191, 209, 6, 160, 93, 94, 163, 11, 216, 200, 252, 83, 271, 238, 273, 87, 258, 208, 226, 23, 177, 110, 111, 180, 28, 233, 217, 269, 100, 288, 255, 1, 104, 275, 225, 243, 40, 194, 127, 128, 197, 45, 250, 234, 286, 117, 16, 272, 18, 121, 3, 242, 260, 57, 211, 144, 145, 214, 62, 267, 251, 14, 134, 33, 0, 35, 138, 20, 259, 277, 74, 228, 161, 162, 231, 79, 284, 268, 31, 151, 50, 17, 52, 155, 37, 276, 5, 91, 245, 178, 179, 248, 96, 12, 285, 48, 168, 67, 34, 69, 172, 54, 4, 22, 108, 262, 195, 196, 265, 113, 29, 13, 65, 185, 84, 51, 86, 189, 71, 21, 39, 125, 279, 212, 213, 282, 130, 46, 30, 82, 202, 101, 68, 103, 206, 88, 38, 56, 142, 7, 229, 230, 10, 147, 63, 47, 99, 219, 118, 85, 120, 223, 105, 55, 73, 159, 24, 246, 247, 27, 164, 80, 64, 116, 236, 135, 102, 137, 240, 122, 72, 90, 176, 41, 263, 264, 44, 181, 97, 81, 133, 253, 152, 119, 154, 257, 139, 89, 107, 193, 58, 280, 281, 61, 198, 114, 98, 150, 270, 169, 136, 171, 274, 156, 106, 124, 210, 75, 8, 9, 78, 215, 131, 115, 167, 287, 186, 153, 188, 2, 173, 123, 141, 227, 92, 25, 26, 95, 232, 148, 132, 184, 15, 203, 170, 205, 19, 190, 140, 158, 244, 109, 42, 43, 112, 249, 165, 149, 201, 32, 220, 187, 222, 36, 207, 157, 175, 261, 126, 59, 60, 129, 266, 182, 166, 218, 49, 237, 204, 239, 53, 224, 174, 192, 278, 143, 76, 77, 146, 283, 199, 183, 235, 66, 254, 221, 256]);
    this.mod289_temp0 = 0.0034602077212184668;//1.0 / 289.0;
}

SimplexNoise2D.prototype.snoise = function(inX, inY) {
    var perm = this.perm,
        mod289_temp0 = this.mod289_temp0;

    // First corner
    // GLSL code:
    // vec2 i = floor(v + dot(v, C.yy) );
    // Optimization? Taken from https://www.shadertoy.com/view/4sdGD8
    // vec2 i = floor(v + (v.x+v.y) * Y);
    var i_0 = Math.floor(inX + (inX + inY) * 0.366025403784439);
    var i_1 = Math.floor(inY + (inX + inY) * 0.366025403784439);
    // Old code:
    // var temp_dot0 = inX * 0.366025403784439 + inY * 0.366025403784439;
    // i_0 = Math.floor(inX + temp_dot0);
    // i_1 = Math.floor(inY + temp_dot0);

    // GLSL code:
    // vec2 x0 = v - i + dot(i, C.xx);
    // Optimization? Taken from https://www.shadertoy.com/view/4sdGD8
    // vec2 x0 = v - i + (i.x+i.y) * X;
    var x0_0 = inX - i_0 + (i_0 + i_1) * 0.211324865405187;
    var x0_1 = inY - i_1 + (i_0 + i_1) * 0.211324865405187;

    // GLSL code:
    // vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    var i1_0 = (x0_0 > x0_1) ? 1.0 : 0.0;
    var i1_1 = (x0_0 > x0_1) ? 0.0 : 1.0;

    // GLSL code:
    // vec4 x12 = x0.xyxy + C.xxzz;
    // x12.xy -= i1;
    var x12_0 = x0_0 + 0.211324865405187 - i1_0;
    var x12_1 = x0_1 + 0.211324865405187 - i1_1;
    var x12_2 = x0_0 -0.577350269189626;
    var x12_3 = x0_1 -0.577350269189626;

    // Permutations
    // GLSL code:
    // i = mod289(i);
    //mod289_vec2(i);
    i_0 = i_0 - Math.floor(i_0 * mod289_temp0) * 289.0;
    i_1 = i_1 - Math.floor(i_1 * mod289_temp0) * 289.0;

    // GLSL code:
    // vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));

    var p_0 = perm[ (perm[i_1 + 0.0   ] + i_0 + 0.0  ) & 511 ] * 0.024390243902439;
    var p_1 = perm[ (perm[i_1 + i1_1  ] + i_0 + i1_0 ) & 511 ] * 0.024390243902439;
    var p_2 = perm[ (perm[i_1 + 1.0   ] + i_0 + 1.0  ) & 511 ] * 0.024390243902439;

    // Optimized below, to save lines
    //m_0 = m_0 * m_0 * m_0 * m_0;
    //m_1 = m_1 * m_1 * m_1 * m_1;
    //m_2 = m_2 * m_2 * m_2 * m_2;

    // GLSL code:
    // vec3 x = 2.0 * fract(p * C.www) - 1.0;
    // fract(x) = x - floor(x)
    var x_0 = 2.0 * (p_0 - Math.floor(p_0)) - 1.0;
    var x_1 = 2.0 * (p_1 - Math.floor(p_1)) - 1.0;
    var x_2 = 2.0 * (p_2 - Math.floor(p_2)) - 1.0;

    // GLSL code:
    // vec3 h = abs(x) - 0.5;
    var h_0 = Math.abs(x_0) - 0.5;
    var h_1 = Math.abs(x_1) - 0.5;
    var h_2 = Math.abs(x_2) - 0.5;

    // GLSL code:
    // vec3 ox = floor(x + 0.5);
   // ox_0 = Math.floor(x_0 + 0.5);
   // ox_1 = Math.floor(x_1 + 0.5);
   // ox_2 = Math.floor(x_2 + 0.5);

    // GLSL code:
    // vec3 a0 = x - ox;

    var a0_0 = x_0 - Math.floor(x_0 + 0.5);
    var a0_1 = x_1 - Math.floor(x_1 + 0.5);
    var a0_2 = x_2 - Math.floor(x_2 + 0.5);

   /* p = permute_vec3(permute_vec3(p));
    p_0 *= 0.024390243902439;
    p_1 *= 0.024390243902439;
    p_2 *= 0.024390243902439;*/
   // p_1  =permute_vec3(permute_vec3()) * 0.024390243902439;

    // GLSL code:
    // vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
    // m = m*m ;
    // m = m*m ;

    var m_0 = Math.max(0.5 - (x0_0 * x0_0 + x0_1 * x0_1), 0.0);
    var m_1 = Math.max(0.5 - (x12_0 * x12_0 + x12_1 * x12_1), 0.0);
    var m_2 = Math.max(0.5 - (x12_2 * x12_2 + x12_3 * x12_3), 0.0);


    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt( a0*a0 + h*h );
    // GLSL code:
    // m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

    m_0 = m_0 * m_0 * m_0 * m_0 * ( 1.79284291400159 - 0.85373472095314 * ( a0_0 * a0_0 + h_0 * h_0 ) );
    m_1 = m_1 * m_1 * m_1 * m_1 * ( 1.79284291400159 - 0.85373472095314 * ( a0_1 * a0_1 + h_1 * h_1 ) );
    m_2 = m_2 * m_2 * m_2 * m_2 * ( 1.79284291400159 - 0.85373472095314 * ( a0_2 * a0_2 + h_2 * h_2 ) );

    // Compute final noise value at P
    // GLSL code:
    // vec3 g;
    // g.x  = a0.x  * x0.x  + h.x  * x0.y;
    // g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    var g_0 = a0_0  * x0_0  + h_0 * x0_1;
    var g_1 = a0_1  * x12_0 + h_1 * x12_1;
    var g_2 = a0_2  * x12_2 + h_2 * x12_3;

    // GLSL code:
    // return 130.0 * dot(m, g);

    return 130.0 * (m_0 * g_0 + m_1 * g_1 + m_2 * g_2);//vec3.dot(m, g);
}